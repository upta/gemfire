define(["require","exports","tests/helper","auth"],function(n,t,i,r){var f=i,u=r;QUnit.module("auth",{teardown:function(){$.removeCookie("gemfire.state"),f.restore(n("global").reload),f.restore(n("hubs/lobby").start)}}),test("logout() -> Removes state cookie and reloads page",function(){$.cookie("gemfire.state","test cookie"),sinon.stub(n("global"),"reload",function(){ok(!0,"Reloaded page")}),u.logout(),ok(!$.cookie("gemfire.state"),"Cookie removed")}),asyncTest("init() -> Rejects if the state cookie has no registrationId",function(){$.cookie("gemfire.state",JSON.stringify({})),u.init().fail(function(){ok(!0)}).done(function(){ok(!1,"Shouldn't resolve if no registrationId")}).always(function(){start()})}),asyncTest("init() -> Re-creates cookie without registrationId",function(){var t={registrationId:"12345"};$.cookie("gemfire.state",JSON.stringify(t)),sinon.stub(n("hubs/lobby"),"start",function(){return ok(!0,"Called lobby.start()"),$.Deferred(function(n){n.resolve({userId:1})}).promise()}),u.init().done(function(){ok(!0,"Resolved after successful lobby.start()")}).always(function(){delete t.registrationId,deepEqual(t,$.parseJSON($.cookie("gemfire.state")),"Removed registratonId from cookie"),start()})}),asyncTest("init() -> Rejects if lobby.start() fails",function(){$.cookie("gemfire.state",JSON.stringify({registrationId:"12345"})),sinon.stub(n("hubs/lobby"),"start",function(){return $.Deferred(function(n){n.reject()}).promise()}),u.init().fail(function(){ok(!0)}).done(function(){ok(!1,"Shouldn't resolve if lobby.start() failed")}).always(function(){start()})})})