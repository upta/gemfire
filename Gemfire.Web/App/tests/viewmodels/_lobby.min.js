define(["require","exports","viewmodels/lobby","tests/helper","auth"],function(n,t,i,r,u){var s="viewmodels/lobby",f=i,o=r,e=u;QUnit.module(s,{setup:function(){var n=f;e.user=new e.RegisteredClient,e.user.userId="user-id"},teardown:function(){o.restore(n("hubs/lobby").getGames),o.restore(n("hubs/lobby").leaveGame),o.restore(n("hubs/lobby").joinGame)}}),asyncTest("activate() -> Calls lobby.getGames(), populates games collection on success",function(){var t={id:"test-id"},i=null;sinon.stub(n("hubs/lobby"),"getGames",function(){return ok(!0,"Called lobby.getGames()"),setTimeout(function(){var n=_.find(i.filteredGames(),function(n){return n.id===t.id});deepEqual(n,t,"Found game in filtered list")},0),$.Deferred(function(n){n.resolve([t])}).promise()}),o.reload(s).always(function(n){i=n,i.activate(),start()})}),asyncTest("activate() -> Only calls lobby.getGames() the first time its run",function(){var t=0;sinon.stub(n("hubs/lobby"),"getGames",function(){return t++,$.Deferred(function(n){n.resolve()}).promise()}),o.reload(s).always(function(n){n.activate(),n.activate(),equal(t,1,"Didn't reinitialize games"),start()})}),test("canJoinGame() -> Returns true if they aren't already a member of the game, false if they are",function(){var t={id:e.user.userId},n={userList:ko.observableArray([t])};equal(f.canJoinGame(n),!1,"They were in the game, so it said no"),n.userList.removeAll(),equal(f.canJoinGame(n),!0,"They weren't in the game, so it said yes")}),test("canLeaveGame() -> Returns true if they are in the game and not the owner, otherwise false",function(){var t={id:e.user.userId},n={userList:ko.observableArray([t])};equal(f.canLeaveGame(n),!0,"They were in the game and not the owner, so it said yes"),n.creator=t.id,equal(f.canLeaveGame(n),!1,"They were in the game and not the owner, so it said yes"),n.userList.removeAll(),equal(f.canLeaveGame(n),!1,"They weren't in the game, so it said no")}),test("createdGame() -> Returns true if they are the game creator",function(){var n={id:e.user.userId},t={creator:n.id,userList:ko.observableArray([])};ok(f.createdGame(t))}),test("joinGame() -> Calls lobby.joinGame() with correct id",function(){var t={userList:ko.observableArray([])};t.id="game-id",sinon.stub(n("hubs/lobby"),"joinGame",function(n){equal(n,t.id)}),f.joinGame(t)}),test("leaveGame() -> Calls lobby.leaveGame() with correct id",function(){var t={userList:ko.observableArray([])};t.id="game-id",sinon.stub(n("hubs/lobby"),"leaveGame",function(n){equal(n,t.id)}),f.leaveGame(t)})})